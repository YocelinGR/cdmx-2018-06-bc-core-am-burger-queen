{"version":3,"sources":["config.js","Components/Home/Home.js","registerServiceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Home","state","isSignedIn","uiConfig","signInFlow","signInOptions","auth","GoogleAuthProvider","PROVIDER_ID","EmailAuthProvider","callbacks","sigInSuccess","componentDidMount","onAuthStateChanged","user","_this","setState","console","log","react_default","a","createElement","className","this","currentUser","displayName","photoURL","alt","src","onClick","signOut","StyledFirebaseAuth_default","firebaseAuth","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","Components_Home_Home","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"iQAWeA,IAASC,cATL,CACfC,OAAQ,0CACRC,WAAY,oCACZC,YAAa,2CACbC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,uCC4CRC,6MAxCbC,MAAQ,CAAEC,YAAY,KACtBC,SAAW,CACTC,WAAY,WACZC,cAAe,CACbb,IAASc,KAAKC,mBAAmBC,YACjChB,IAASc,KAAKG,kBAAkBD,aAElCE,UAAW,CACTC,aAAc,kBAAM,OAIxBC,kBAAoB,WAClBpB,IAASc,OAAOO,mBAAmB,SAAAC,GACjCC,EAAKC,SAAS,CAAEd,aAAcY,IAC9BG,QAAQC,IAAI,OAAQJ,8EAKtB,OACEK,EAAAC,EAAAC,cAAA,OAAKC,UAAW,cACbC,KAAKtB,MAAMC,WACZiB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAY,cACfH,EAAAC,EAAAC,cAAA,2DACAF,EAAAC,EAAAC,cAAA,mBAAW7B,IAASc,OAAOkB,YAAYC,aACC,OAAvCjC,IAASc,OAAOkB,YAAYE,SAC5BP,EAAAC,EAAAC,cAAA,OAAKM,IAAM,kBAAkBC,IAAI,sHACjCT,EAAAC,EAAAC,cAAA,OAAKM,IAAM,kBAAkBC,IAAMpC,IAASc,OAAOkB,YAAYE,WAChEP,EAAAC,EAAAC,cAAA,UAAQC,UAAY,kCAAkCO,QAAS,kBAAMrC,IAASc,OAAOwB,YAArF,WAIFX,EAAAC,EAAAC,cAACU,EAAAX,EAAD,CAAoBjB,SAAWoB,KAAKpB,SAAU6B,aAAgBxC,IAASc,iBAnC9D2B,aCDbC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB/C,QACfyC,UAAUC,cAAcQ,WAK1BlC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBkC,MAAM,SAAAC,GACLpC,QAAQoC,MAAM,4CAA6CA,KCxEjEC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAAUC,SAASC,eAAe,SDanC,WACb,GAA6C,kBAAmBhB,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,wCAAwBxB,OAAOC,UAC3CwB,SAAWzB,OAAOC,SAASwB,OAIvC,OAGFzB,OAAO0B,iBAAiB,OAAQ,WAC9B,IAAMrB,EAAK,GAAAsB,OAAMH,wCAAN,sBAEP1B,GAiDV,SAAiCO,GAE/BuB,MAAMvB,GACHI,KAAK,SAAAoB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C3B,UAAUC,cAAc2B,MAAMzB,KAAK,SAAAC,GACjCA,EAAayB,aAAa1B,KAAK,WAC7BT,OAAOC,SAASmC,aAKpBhC,EAAgBC,KAGnBW,MAAM,WACLnC,QAAQC,IACN,mEArEAuD,CAAwBhC,GAIxBC,UAAUC,cAAc2B,MAAMzB,KAAK,WACjC5B,QAAQC,IACN,+GAMJsB,EAAgBC,MCxCxBiC","file":"static/js/main.36349951.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\nconst configKeys = {\r\n    apiKey: \"AIzaSyBG5f44i0Z7u08aC4jvzwt5WtOA8FC_Ntw\",\r\n    authDomain: \"burgerqueen-4582f.firebaseapp.com\",\r\n    databaseURL: \"https://burgerqueen-4582f.firebaseio.com\",\r\n    projectId: \"burgerqueen-4582f\",\r\n    storageBucket: \"burgerqueen-4582f.appspot.com\",\r\n    messagingSenderId: \"791271137757\"\r\n};\r\n\r\nconst Config = firebase.initializeApp(configKeys);\r\n\r\nexport { Config };","import React, { Component } from 'react';\r\nimport { BrowserRouter} from 'react-router-dom';\r\nimport {\r\n  Button, Row, Col,\r\n  Input,\r\n} from 'react-materialize';\r\nimport { Config } from '../../config'; \r\nimport './Home.css'\r\nimport firebase from 'firebase';\r\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\r\n\r\nclass Home extends Component{\r\n  state = { isSignedIn: false}\r\n  uiConfig = {\r\n    signInFlow: \"redirect\",\r\n    signInOptions: [\r\n      firebase.auth.GoogleAuthProvider.PROVIDER_ID,\r\n      firebase.auth.EmailAuthProvider.PROVIDER_ID\r\n    ],\r\n    callbacks: {\r\n      sigInSuccess: () => false\r\n    }\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    firebase.auth().onAuthStateChanged(user => {\r\n      this.setState({ isSignedIn: !!user})\r\n      console.log(\"user\", user);\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className= \"LogInStyle\">\r\n        {this.state.isSignedIn ? (\r\n        <div>\r\n          <div className = \"user-loged\">\r\n            <h3>Hola, hoy serás una gran día de trabajo</h3>\r\n            <h4>Hola: {firebase.auth().currentUser.displayName}</h4>\r\n            {firebase.auth().currentUser.photoURL===null ?\r\n            (<img alt = \"foto de usuario\" src=\"https://github.com/YocelinGR/cdmx-2018-06-bc-core-am-burger-queen/blob/master/assets/waitress-avatar.jpg?raw=true\" />) :\r\n            (<img alt = \"foto de usuario\" src= {firebase.auth().currentUser.photoURL} />)}\r\n            <button className = \"btn btn-floating pink lighten-1\" onClick={() => firebase.auth().signOut()}>Salir</button>\r\n          </div>\r\n        </div>\r\n        ) : (\r\n          <StyledFirebaseAuth uiConfig= {this.uiConfig} firebaseAuth = {firebase.auth()} />\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Home;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\nimport Home from './Components/Home/Home';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<Home />, document.getElementById('root'));\r\nregisterServiceWorker();"],"sourceRoot":""}