{"version":3,"sources":["config.js","Components/NavBar/NavBar.js","Components/Home/Home.js","Components/App/App.js","registerServiceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","NavBar","react_default","a","createElement","lib","brand","right","className","Link","to","Home","state","isSignedIn","uiConfig","signInFlow","signInOptions","auth","GoogleAuthProvider","PROVIDER_ID","EmailAuthProvider","callbacks","sigInSuccess","componentDidMount","onAuthStateChanged","user","_this","setState","console","log","Components_NavBar_NavBar","this","currentUser","displayName","photoURL","alt","src","onClick","signOut","StyledFirebaseAuth_default","firebaseAuth","Component","App","BrowserRouter","Switch","Route","path","exact","component","WaitressView","Breakfast","Lunch","ChefView","AdminView","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","Components_App_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.2a433068.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\nconst configKeys = {\r\n    apiKey: \"AIzaSyBG5f44i0Z7u08aC4jvzwt5WtOA8FC_Ntw\",\r\n    authDomain: \"burgerqueen-4582f.firebaseapp.com\",\r\n    databaseURL: \"https://burgerqueen-4582f.firebaseio.com\",\r\n    projectId: \"burgerqueen-4582f\",\r\n    storageBucket: \"burgerqueen-4582f.appspot.com\",\r\n    messagingSenderId: \"791271137757\"\r\n};\r\n\r\nconst Config = firebase.initializeApp(configKeys);\r\n\r\nexport { Config };","import React from 'react';\r\nimport { Link} from 'react-router-dom';\r\nimport { Navbar, NavItem } from 'react-materialize';\r\nimport './NavBar.css';\r\n\r\n\r\nconst NavBar = () => {\r\n    return (\r\n        <Navbar brand='Home' right className ='nav-style'>\r\n            <NavItem>Home<Link to='/' className=\"brand-logo\"></Link></NavItem>\r\n            <NavItem>Meseros<Link to='/WaitressView' className=\"brand-logo\"></Link></NavItem>\r\n            <NavItem>Chef<Link to='/ChefView' className=\"brand-logo\"></Link></NavItem>\r\n            <NavItem>Administrador<Link to='/AdminView' className=\"brand-logo\"></Link></NavItem>\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nexport default NavBar;","import React, { Component } from 'react';\r\n\r\nimport { Config } from '../../config'; // eslint-disable-next-line\r\nimport './Home.css'\r\nimport firebase from 'firebase';\r\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\r\nimport NavBar from '../NavBar/NavBar';\r\n\r\nclass Home extends Component{\r\n  state = { isSignedIn: false}\r\n  uiConfig = {\r\n    signInFlow: \"redirect\",\r\n    signInOptions: [\r\n      firebase.auth.GoogleAuthProvider.PROVIDER_ID,\r\n      firebase.auth.EmailAuthProvider.PROVIDER_ID\r\n    ],\r\n    callbacks: {\r\n      sigInSuccess: () => false\r\n    }\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    firebase.auth().onAuthStateChanged(user => {\r\n      this.setState({ isSignedIn: !!user})\r\n      console.log(\"user\", user);\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className= \"LogInStyle\">\r\n        <NavBar />\r\n        {this.state.isSignedIn ? (\r\n        <div>\r\n          <div className = \"user-loged\">\r\n            <h3>Hoy será una gran día de trabajo</h3>\r\n            <h4>Hola: {firebase.auth().currentUser.displayName}</h4>\r\n            {firebase.auth().currentUser.photoURL===null ?\r\n            (<img className = \"photo-user\" alt = \"foto de usuario\" src=\"https://github.com/YocelinGR/cdmx-2018-06-bc-core-am-burger-queen/blob/master/assets/waitress-avatar.jpg?raw=true\" />) :\r\n            (<img className = \"photo-user\" alt = \"foto de usuario\" src= {firebase.auth().currentUser.photoURL} />)}\r\n            <button className = \"btn btn-floating lighten-1 btn-user\" onClick={() => firebase.auth().signOut()}>Salir</button>\r\n          </div>\r\n        </div>\r\n        ) : (\r\n        <div>\r\n          <h1>Burguer</h1>\r\n          <h2><strong>Queen</strong></h2>\r\n          <p>Para los amantes de lo bueno</p>\r\n          <img alt =\"An hamburguer for the main view\" src=\"https://github.com/YocelinGR/cdmx-2018-06-bc-core-am-burger-queen/blob/master/assets/hamb-burgue-circle.png?raw=true\" />\r\n            <StyledFirebaseAuth uiConfig= {this.uiConfig} firebaseAuth = {firebase.auth()} />\r\n        </div>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Home;\r\n","import React, { Component } from 'react';\n\nimport {\n  BrowserRouter, Switch, Route, \n} from 'react-router-dom';\n\nimport './App.css';\n\nimport Home from '../Home/Home.js';\nimport WaitressView from '../WaitressView/WaitressView.js';\nimport ChefView from '../ChefView/ChefView.js';\nimport Breakfast from '../Breakfast/Breakfast.js';\nimport Lunch from '../Lunch/Lunch.js';\nimport AdminView from '../AdminView/AdminView.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <BrowserRouter>\n        <div>\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/WaitressView\" exact component={WaitressView}/>\n          <Route path=\"/WaitressView/Breakfast\" exact component={Breakfast}/>\n          <Route path=\"/WaitressView/Lunch\" exact component={Lunch}/>\n          <Route path=\"/ChefView\" exact component={ChefView}/>\n          <Route path=\"/AdminView\" exact component={AdminView}/>\n          </Switch>\n        </div>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\nimport App from './Components/App/App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();"],"sourceRoot":""}